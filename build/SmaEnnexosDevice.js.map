{
  "version": 3,
  "sources": ["../src/SmaEnnexosDevice.ts"],
  "sourcesContent": ["import SmaDevice from \"./SmaDevice\";\nimport {getDevices, getMeta, Devices, MetaItems} from \"./data\";\n\ninterface SmaLoginResponse {\n    access_token: string,\n    expires_in: number,\n    refresh_token: string,\n    token_type: string,\n    uiIdleTime: number|string,\n}\n\n\nexport type LiveRequestResponse = Channels[]\n\nexport interface Channels {\n    channelId: string\n    componentId: string\n    values: ParameterValue[]|Values[]\n}\n\n// export interface Value {\n//     time: string\n//     value?: number\n// }\nexport interface Values {\n    time: string\n    values?: number[]\n}\n\n\n\n// const WidgetTypeMap: { [key: string]: string } = {\n//     State: 'states',\n//     EMobilityInformation: 'emobility',\n//     EnergyAndPowerChargingStation: 'power',\n// }\n\nexport type StateWidgetResponse = WidgetStateResponseItem[]\n\nexport interface WidgetStateResponseItem {\n    componentId: string\n    componentType: string\n    name: string\n    state: number\n    stateFunctionTag: number\n}\n\nexport interface EMobilityInformationWidgetResponse {\n    chargeStatus: string\n    evStatus: number\n    evseName: string\n    evseStatus: number\n    notificationList: any[]\n    power: number\n    sessionEnergy: number\n}\n\nexport interface PowerGaugeWidgetResponse {\n    max: number\n    min: number\n    value: number|'NaN'\n    timestamp?: string\n}\n\nexport interface DeviceInfoWidgetResponse {\n    deviceId: string\n    deviceInfoFeatures: DeviceInfoFeature[]\n    name: string\n    plantId: string\n    productGroupTagId: number\n    productTagId: number\n    serial: string\n}\n\nexport interface DeviceInfoFeature {\n    infoWidgetType: string\n    value: string\n}\n\ntype WidgetResponse = {\n    'DeviceInfo': DeviceInfoWidgetResponse,\n    'State': StateWidgetResponse,\n    'EMobilityInformation': EMobilityInformationWidgetResponse\n    'EnergyAndPowerChargingStation': PowerGaugeWidgetResponse\n    'EnergyAndPower': PowerGaugeWidgetResponse\n}\n\nexport type WidgetsResponse = WidgetsResponseItem[]\n\nexport interface WidgetsResponseItem {\n    widgetType: keyof WidgetResponse\n}\n\nexport type ParametersResponse = ParametersData[]\n\nexport interface ParametersData {\n    componentId: string\n    values: (ParameterValue|ParametersValue)[]\n}\n\nexport interface ParameterValue {\n    channelId: string\n    editable: boolean\n    state: string\n    timestamp: string\n    value: string\n    possibleValues?: string[]\n    max?: number\n    min?: number\n}\nexport interface ParametersValue {\n    channelId: string\n    editable: boolean\n    state: string\n    timestamp: string\n    values: string[]\n    possibleValues?: string[]\n    max?: number\n    min?: number\n}\n\n\nexport default class SmaEnnexosDevice extends SmaDevice{\n\n    private componentId = 'IGULD:SELF';\n\n    protected async login(): Promise<SmaLoginResponse> {\n        return this._client.post<SmaLoginResponse>('/api/v1/token', {\n            grant_type: 'password',\n            username: this._config.username,\n            password: this._config.password,\n        },{\n            headers: {\n                \"content-type\": \"application/x-www-form-urlencoded\",\n            },\n        } )\n            .then(({data}) => data)\n    }\n\n    public async getLiveMeasurementValues (): Promise<LiveRequestResponse> {\n        return this._client.post<LiveRequestResponse>(`/api/v1/measurements/live`,\n            [{componentId: this.componentId}],\n        ).then(({data}) => data)\n            ;\n\n    }\n\n    public async getParameters (): Promise<ParametersResponse> {\n        return this._client.post<ParametersResponse>(`/api/v1/parameters/search`,\n            {queryItems:[{componentId:this.componentId}]},\n        ).then(({data}) => data)\n            ;\n\n    }\n\n    public async getWidgets (): Promise<WidgetsResponse> {\n\n        return this._client.get<WidgetsResponse>(`/api/v1/dashboard/widgets?componentId=${this.componentId}`,\n        ).then(({data}) => data)\n            ;\n    }\n\n    public async getWidgetData<K extends keyof WidgetResponse>(name: K): Promise<WidgetResponse[K]|null> {\n        // const widget = WidgetTypeMap[name];\n        let url = '';\n        switch (name) {\n            case 'DeviceInfo':\n                url = `/api/v1/widgets/deviceinfo?deviceId=${this.componentId}`;\n                break;\n            case 'State':\n                url = `/api/v1/widgets/states?componentId=${this.componentId}`;\n                break;\n            case 'EMobilityInformation':\n                url = `/api/v1/widgets/emobility?componentId=${this.componentId}`;\n                break;\n            case 'EnergyAndPowerChargingStation':\n                url = `/api/v1/widgets/gauge/power?componentId=${this.componentId}&type=ChargingStation`;\n                break;\n            case 'EnergyAndPower':\n                url = `/api/v1/widgets/gauge/power?componentId=${this.componentId}&type=PvProduction`;\n                break;\n            default:\n                return null;\n        }\n\n        return this._client.get<WidgetResponse[K]>(url)\n            .then(({data}) => data)\n        ;\n    }\n\n    public async getDeviceDefinitions(): Promise<Devices> {\n        return Promise.resolve(getDevices('TripowerX'));\n    }\n    public async getTranslations(): Promise<MetaItems> {\n        return Promise.resolve(getMeta('TripowerX', 'de').META);\n    }\n}\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsB;AACtB,kBAAsD;AAyHtD,MAAO,yBAAuC,iBAAAA,QAAS;AAAA,EAE3C,cAAc;AAAA,EAEtB,MAAgB,QAAmC;AAC/C,WAAO,KAAK,QAAQ,KAAuB,iBAAiB;AAAA,MACxD,YAAY;AAAA,MACZ,UAAU,KAAK,QAAQ;AAAA,MACvB,UAAU,KAAK,QAAQ;AAAA,IAC3B,GAAE;AAAA,MACE,SAAS;AAAA,QACL,gBAAgB;AAAA,MACpB;AAAA,IACJ,CAAE,EACG,KAAK,CAAC,EAAC,KAAI,MAAM,IAAI;AAAA,EAC9B;AAAA,EAEA,MAAa,2BAA0D;AACnE,WAAO,KAAK,QAAQ;AAAA,MAA0B;AAAA,MAC1C,CAAC,EAAC,aAAa,KAAK,YAAW,CAAC;AAAA,IACpC,EAAE,KAAK,CAAC,EAAC,KAAI,MAAM,IAAI;AAAA,EAG3B;AAAA,EAEA,MAAa,gBAA8C;AACvD,WAAO,KAAK,QAAQ;AAAA,MAAyB;AAAA,MACzC,EAAC,YAAW,CAAC,EAAC,aAAY,KAAK,YAAW,CAAC,EAAC;AAAA,IAChD,EAAE,KAAK,CAAC,EAAC,KAAI,MAAM,IAAI;AAAA,EAG3B;AAAA,EAEA,MAAa,aAAwC;AAEjD,WAAO,KAAK,QAAQ;AAAA,MAAqB,yCAAyC,KAAK,WAAW;AAAA,IAClG,EAAE,KAAK,CAAC,EAAC,KAAI,MAAM,IAAI;AAAA,EAE3B;AAAA,EAEA,MAAa,cAA8C,MAA0C;AAEjG,QAAI,MAAM;AACV,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,cAAM,uCAAuC,KAAK,WAAW;AAC7D;AAAA,MACJ,KAAK;AACD,cAAM,sCAAsC,KAAK,WAAW;AAC5D;AAAA,MACJ,KAAK;AACD,cAAM,yCAAyC,KAAK,WAAW;AAC/D;AAAA,MACJ,KAAK;AACD,cAAM,2CAA2C,KAAK,WAAW;AACjE;AAAA,MACJ,KAAK;AACD,cAAM,2CAA2C,KAAK,WAAW;AACjE;AAAA,MACJ;AACI,eAAO;AAAA,IACf;AAEA,WAAO,KAAK,QAAQ,IAAuB,GAAG,EACzC,KAAK,CAAC,EAAC,KAAI,MAAM,IAAI;AAAA,EAE9B;AAAA,EAEA,MAAa,uBAAyC;AAClD,WAAO,QAAQ,YAAQ,wBAAW,WAAW,CAAC;AAAA,EAClD;AAAA,EACA,MAAa,kBAAsC;AAC/C,WAAO,QAAQ,YAAQ,qBAAQ,aAAa,IAAI,EAAE,IAAI;AAAA,EAC1D;AACJ;",
  "names": ["SmaDevice"]
}
